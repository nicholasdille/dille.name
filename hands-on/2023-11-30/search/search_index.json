{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Workshop: GitLab CI","text":"<p>This site contains the exercises to learn about GitLab CI.</p>"},{"location":"#audience","title":"Audience","text":"<p>Software developers and system administrators who want to learn how to use GitLab CI.</p>"},{"location":"#duration","title":"Duration","text":"<p>Two days</p>"},{"location":"#expected-knowledge","title":"Expected knowledge","text":"<p>Basic under standing of another CI/CD server, e.g. GitHub and Jenkins</p>"},{"location":"#goals","title":"Goals","text":"<p>Learn about the features of GitLab CI and how to use then in a software development project.</p>"},{"location":"#style","title":"Style","text":"<p>20% theoretical introduction</p> <p>80% practical exercises</p> <p>The instructure will provide an introduction to a topic. Participants will then work on exercises. The instructor will be available to answer questions and provide hints. The instructor will also demonstrate solutions to the exercises.</p>"},{"location":"navigation/","title":"Navigation","text":"<p>All pages have the same navigation structure.</p>"},{"location":"navigation/#section-1-menu-on-the-left","title":"Section 1: Menu on the left","text":"<p>The left-hand menu contains the available chapters and displays the structure of the workshop.</p> <p>On smaller screens or windows, the left-hand menu can be shown by clicking on the burger menu .</p>"},{"location":"navigation/#section-2-page-contents-on-the-right","title":"Section 2: Page contents on the right","text":"<p>The right-hand menu contains the contents of the current chapter and lists all exercises contained in the current chapter.</p> <p>On smaller screens or windows, the right-hand menu can be shown by clicking on the burger menu  and then clicking on the icon  next to the current chapter.</p>"},{"location":"000_rollout/exercise_gitlab/","title":"GitLab","text":"<p>This workshop is performed on a shared GitLab instance. You have been assigned a user and password for this instance in an email.</p>"},{"location":"000_rollout/exercise_gitlab/#task-1-retrieve-your-credentials-digitally","title":"Task 1: Retrieve your credentials digitally","text":"<p>You have received your credentials in an email but the password is not fun to type in. Let's retrieve it digitally:</p> <ol> <li>Go to https://code.inmylab.de</li> <li>Select your username from the list</li> <li>Login using your personal user <code>seatN</code> (where <code>N</code> is a number) and your code (looks like this <code>ABCDEF</code>)</li> <li>The web page displays your credentials</li> </ol> <p>Keep the page open to refer to your credentials anytime throughout the workshop.</p>"},{"location":"000_rollout/exercise_gitlab/#task-2-login-to-gitlab","title":"Task 2: Login to GitLab","text":"<p>Go to https://gitlab.inmylab.de and login with your credentials.</p> Hint (Click if you are stuck) <p>Your username looks like <code>seatN</code> where <code>N</code> is a number.</p> <p>Your password is a long, random string which is displayed on the web pages access in the previous task.</p> Solution (Click if you are stuck) <p><code>.gitlab-ci.yml</code>:</p> <pre><code>build:\n  script:\n  - apk update\n  - apk add go\n  - go build -o hello .\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <pre><code>git checkout origin/160_gitlab_ci/010_jobs_and_stages/build -- '*'\n</code></pre>"},{"location":"000_rollout/exercise_gitlab/#task-3-access-the-demo-project","title":"Task 3: Access the demo project","text":"<p>A personal project has been provisioned for you to follow this workshop. It is called <code>demo</code>. Let's find it!</p> Hint (Click if you are stuck) <p>Personal projects are access by clicking on your avatar in the top left corner.</p> Solution (Click if you are stuck) <p>The deep link is https://gitlab.inmylab.de/seatN/demo where <code>N</code> is a number.</p>"},{"location":"000_rollout/exercise_ide/","title":"IDE","text":"<p>You can follow this workshop in the IDE (Integrated Development Environment) of your choice but...</p> <p>A web-based instance of Visual Studio Code has been provisioned for you to follow this workshop.</p>"},{"location":"000_rollout/exercise_ide/#task-access-your-instance-of-visual-studio-code","title":"Task: Access your instance of Visual Studio Code","text":"<ol> <li>Go to https://seatN.vscode.inmylab.de where <code>N</code> is a number.</li> <li>Login using your personal user <code>seatN</code> (where <code>N</code> is a number) and your password</li> </ol> <p>The password is the same as your GitLab password.</p> Hint (Click if you are stuck) <p>Your username looks like <code>seatN</code> where <code>N</code> is a number.</p> <p>Your password is a long, random string which is displayed on the web pages access in the previous chapter.</p>"},{"location":"000_rollout/exercise_project/","title":"Project","text":""},{"location":"000_rollout/exercise_project/#task-1-view-the-demo-project","title":"Task 1: View the demo project","text":"<p>Your instance of Visual Studio Code is provisioned with your credentials to allow Git-over-HTTP to the GitLab instance as well as a clone of the <code>demo</code> project.</p> <ol> <li>In the directory tree</li> <li>Find the <code>demo</code> project under <code>/home/seat</code></li> </ol>"},{"location":"000_rollout/exercise_project/#task-2-pulling-from-the-upstream-repository","title":"Task 2: Pulling from the upstream repository","text":"<p>XXX</p> <ol> <li>Open a terminal</li> <li>Change to the <code>demo</code> project directory</li> <li>List remotes: <code>git remote -v</code></li> <li>Pull from the upstream repository: <code>git pull upstream --all</code></li> </ol>"},{"location":"010_jobs_and_stages/exercise/","title":"Jobs and stages","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>create jobs</li> <li>organize them in stages</li> <li>understand when jobs in different stages are executed</li> </ul>"},{"location":"010_jobs_and_stages/exercise/#preparation","title":"Preparation","text":"<p>This workshop is based on an example hello world application written in Go. Get the code using the following command:</p> <pre><code>git checkout origin/160_gitlab_ci/example_app -- '*'\n</code></pre>"},{"location":"010_jobs_and_stages/exercise/#task-1-create-a-single-job","title":"Task 1: Create a single job","text":"<p>Add a pipeline to build the code using the following commands:</p> <pre><code>apk update\napk add go\ngo build -o hello .\n./hello\n</code></pre> <p>See the official documentation about jobs.</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <ol> <li>Add a file called <code>.gitlab-ci.yml</code> in the root of the project</li> <li>Add a job called <code>build</code></li> </ol> Solution (Click if you are stuck) <p><code>.gitlab-ci.yml</code>:</p> <pre><code>build:\n  script:\n  - apk update\n  - apk add go\n  - go build -o hello .\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <pre><code>git checkout origin/160_gitlab_ci/010_jobs_and_stages/build -- '*'\n</code></pre>"},{"location":"010_jobs_and_stages/exercise/#task-2-add-a-stage","title":"Task 2: Add a stage","text":"<p>Modify the pipeline to consist of two stages called <code>check</code> and <code>build</code> where the <code>check</code> stage contains the following commands:</p> <pre><code>apk update\napk add go\ngo fmt .\ngo vet .\n</code></pre> <p>See the official documentation about stages.</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <ol> <li>Define two stages using <code>stages</code></li> <li>Add a job called <code>check</code> in the stage <code>check</code></li> </ol> Solution (Click if you are stuck) <p><code>.gitlab-ci.yaml</code>:</p> <pre><code>stages:\n- check\n- build\n\nlint:\n  stage: check\n  script:\n  - apk update\n  - apk add go\n  - go fmt .\n  - go vet .\n\nbuild:\n  stage: build\n  script:\n  - apk update\n  - apk add go\n  - go build -o hello .\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <pre><code>git checkout origin/160_gitlab_ci/010_jobs_and_stages/lint -- '*'\n</code></pre>"},{"location":"010_jobs_and_stages/exercise/#task-3-add-parallel-jobs","title":"Task 3: Add parallel jobs","text":"<p>Split the job <code>check</code> so that one job called <code>lint</code> executes <code>go fmt .</code> and another job called <code>audit</code> executes <code>go vet .</code>.</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>Both jobs <code>lint</code> and <code>audit</code> must be in the stage <code>check</code>.</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n\nlint:\n  stage: check\n  script:\n  - apk update\n  - apk add go\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - apk update\n  - apk add go\n  - go vet .\n\nbuild:\n  stage: build\n  script:\n  - apk update\n  - apk add go\n  - go build -o hello .\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <pre><code>git checkout origin/160_gitlab_ci/010_jobs_and_stages/parallel -- '*'\n</code></pre>"},{"location":"020_variables/exercise/","title":"Variables","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>add local variable to your pipeline</li> <li>consume pre-defined variables</li> <li>add secrets in the UI</li> </ul>"},{"location":"020_variables/exercise/#task-1-create-a-job-variable","title":"Task 1: Create a job variable","text":"<p>This exercise requires an updates version of our hello world program:</p> <pre><code>git checkout origin/160_gitlab_ci/020_variables/inline -- main.go\n</code></pre> <p>Add a variable called <code>version</code> to the job called <code>build</code> and modify the build command as follows:</p> <pre><code>go build -o hello -ldflags \"-X main.Version=${version}\" .\n</code></pre> <p>See the official documentation about variables.</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <ol> <li>Use the <code>variable</code> keyword to define a variable inside the job called <code>build</code></li> <li>Replace the build command with the one provided above</li> </ol> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n\nlint:\n  stage: check\n  script:\n  - apk update\n  - apk add go\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - apk update\n  - apk add go\n  - go vet .\n\nbuild:\n  stage: build\n  variables:\n    version: dev\n  script:\n  - apk update\n  - apk add go\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${version}\" \\\n        -o hello \\\n        .\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <p>git checkout origin/160_gitlab_ci/020_variables/inline -- '*'</p>"},{"location":"020_variables/exercise/#task-2-use-a-predefined-variable","title":"Task 2: Use a predefined variable","text":"<p>Read the official documentation about predefined variables and replace the job variable with the predefined variable <code>CI_COMMIT_REF_NAME</code>.</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <ol> <li>Remove the <code>variable</code> keyword from the job called <code>build</code></li> <li>Replace the variable <code>${version}</code> with the predefined variable <code>${CI_COMMIT_REF_NAME}</code></li> </ol> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n\nlint:\n  stage: check\n  script:\n  - apk update\n  - apk add go\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - apk update\n  - apk add go\n  - go vet .\n\nbuild:\n  stage: build\n  script:\n  - apk update\n  - apk add go\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME}\" \\\n        -o hello \\\n        .\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <p>git checkout origin/160_gitlab_ci/020_variables/predefined -- '*'</p>"},{"location":"020_variables/exercise/#task-3-add-a-ci-variable-in-the-ui","title":"Task 3: Add a CI variable in the UI","text":"<p>This exercise requires an updates version of our hello world application:</p> <pre><code>git checkout origin/160_gitlab_ci/020_variables/ci -- main.go\n</code></pre> <p>The application now also prints the name of the author which must be supplied during compilation as well.</p> <p>Read the official documentation about CI variables and extend the build command to provide <code>main.Author</code> through a CI variable called <code>AUTHOR</code>.</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint 1 (Click if you are stuck) <ol> <li>Go to <code>Settings</code> &gt; <code>CI/CD</code> &gt; <code>Variables</code></li> <li>Add a variable called <code>AUTHOR</code> with your name</li> </ol> Hint 2 (Click if you are stuck) <p>The <code>-ldflags</code> option needs to be extended with <code>-X 'main.Author=${AUTHOR}'</code></p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n\nlint:\n  stage: check\n  script:\n  - apk update\n  - apk add go\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - apk update\n  - apk add go\n  - go vet .\n\nbuild:\n  stage: build\n  script:\n  - apk update\n  - apk add go\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <p>git checkout origin/160_gitlab_ci/020_variables/ci -- '*'</p>"},{"location":"030_script_blocks/exercise/","title":"Scriptblocks","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>Use <code>before_script</code> and <code>after_script</code></li> <li>Separate preparation and cleanup commands from core functionality</li> </ul>"},{"location":"030_script_blocks/exercise/#task-separate-script-blocks-into-preparation-and-main-task","title":"Task: Separate script blocks into preparation and main task","text":"<p>Commands are currently specified using the <code>script</code> directive. These commands consist of preparation, core functionality and (possibly) cleanup.</p> <p>To improve readability, move the preparation of the execution environment to a <code>before_script</code>. See the official documentation.</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>Move calls to <code>apk</code> to the <code>before_script</code>.</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n\nlint:\n  stage: check\n  before_script:\n  - apk update\n  - apk add go\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  before_script:\n  - apk update\n  - apk add go\n  script:\n  - go vet .\n\nbuild:\n  stage: build\n  before_script:\n  - apk update\n  - apk add go\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <p>git checkout origin/160_gitlab_ci/030_script_blocks -- '*'</p> <p>Cleanup commands can be move to <code>after_script</code> (official documentation) but we have no use for this in the current example.</p>"},{"location":"030_script_blocks/exercise/#bonus-1-when-after_script-is-executed","title":"Bonus 1: When <code>after_script</code> is executed","text":"<p>Add commands to all three script block <code>before_script</code>, <code>script</code> and <code>after_script</code>. Test two scenarios:</p> <ol> <li>The pipeline succeeds</li> <li>The pipeline failes</li> </ol> <p>What happens to the code in <code>after_script</code>?</p> Solution (Click to reveal) <p>Command in <code>after_script</code> are always executed even if the job fails.</p> <p>This can be very useful for cleaning up.</p>"},{"location":"030_script_blocks/exercise/#bonus-2-what-happens-to-environment-variables-in-script-blocks","title":"Bonus 2: What happens to environment variables in script blocks?","text":"<p>Define environment variables in all three script blocks and display them in the same and in the following script block.</p> <p>When are environment variables available?</p> Solution (Click to reveal) <p>Commands in <code>before_script</code> and <code>script</code> share a shell session. Environment variables are available throughout these script blocks.</p> <p>Commands in <code>after_script</code> are executed in a new shell session. Environment variables defined in <code>before_script</code> and <code>script</code> are gone.</p>"},{"location":"040_image/exercise/","title":"Images","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>specify which container image to use for a job</li> <li>XXX</li> </ul>"},{"location":"040_image/exercise/#task-simplify-using-container-images","title":"Task: Simplify using container images","text":"<p>In the previous exampes, we called <code>apk</code> at the beginning of every job to install Go. This had to be repeated for every job because Go was not present. Choosing an image for a job using the <code>image</code> directive, time is saved by avoiding commands to install required tools. See the official documentation.</p> <p>Replace the calls to <code>apk</code> with the container image <code>golang:1.19.2</code>.</p> <p>XXX version bump for <code>golang</code> image</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <ul> <li>Remove <code>before_script</code></li> <li>Add <code>image: golang:1.19.2</code> instead</li> </ul> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n\nlint:\n  stage: check\n  image: golang:1.19.2\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  image: golang:1.19.2\n  script:\n  - go vet .\n\nbuild:\n  stage: build\n  image: golang:1.19.2\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <p>git checkout origin/160_gitlab_ci/040_image -- '*'</p>"},{"location":"040_image/exercise/#bonus-test-different-images","title":"Bonus: Test different images","text":"<p>Add a job to your pipeline to test different container images. Check how different images offer specialized execution environments:</p> <ol> <li>Use <code>python:3</code> and test running <code>python --version</code></li> <li>Use <code>node</code> and test running <code>node --version</code></li> </ol>"},{"location":"050_defaults/exercise/","title":"Defaults","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>Avoid repetition in jobs</li> <li>Specify defaults are the top of your pipeline</li> </ul>"},{"location":"050_defaults/exercise/#task-dont-repeat-yourself","title":"Task: Don't repeat yourself","text":"<p>All jobs currently have a dedicated <code>image</code> directive. Using defaults, this repetition can be avoided. See the official documentation.</p> <p>Replace job specific <code>image</code> directives with the <code>default</code> directive.</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <ol> <li>Remove <code>image</code> from all build jobs</li> <li>Add <code>default</code> with the <code>image</code> directive at the top</li> </ol> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nbuild:\n  stage: build\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <p>git checkout origin/160_gitlab_ci/050_default -- '*'</p>"},{"location":"050_defaults/exercise/#bonus-1-override-defaults","title":"Bonus 1: Override defaults","text":"<p>Jobs can still choose to use an image different from the default:</p> <ol> <li>Add a new job</li> <li>Add an <code>image</code> directory to the new job</li> <li>Specify a different image</li> <li>Check out how the executation environment changes</li> </ol>"},{"location":"050_defaults/exercise/#bonus-2-default-values-for-variables","title":"Bonus 2: Default values for variables","text":"<p>XXX <code>variables</code> outside <code>default</code></p>"},{"location":"060_artifacts/exercise/","title":"Artifacts","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>define artifacts</li> <li>consume artifacts</li> </ul>"},{"location":"060_artifacts/exercise/#task-1-pass-an-artifact-to-the-next-stage","title":"Task 1: Pass an artifact to the next stage","text":"<p>Artifacts are useful for splitting a task in separate job. Refer to the official documentation.</p> <p>Improve the pipeline by using artifacts:</p> <ol> <li>Create an artifact from the <code>hello</code> binary</li> <li>Create a new stage called <code>test</code> with a job called <code>test</code></li> <li>Call the <code>hello</code> binary as a smoke test</li> </ol> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>Example for creating an artifacts:</p> <pre><code>job_name:\n  script:\n  - echo foo &gt;file.txt\n  artifacts:\n    paths:\n    - file.txt\n</code></pre> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nbuild:\n  stage: build\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <p>git checkout origin/160_gitlab_ci/060_artifact -- '*'</p>"},{"location":"060_artifacts/exercise/#bonus-1-define-from-which-jobs-to-receive-artifacts","title":"Bonus 1: Define from which jobs to receive artifacts","text":"<p>Usually, artifacts are received from all job in the previous stages. Decide from which jobs to receive artifacts using the <code>dependencies</code> directive. See the official documentation.</p> <p>XXX</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nbuild:\n  stage: build\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  dependencies:\n  - build\n  script:\n  - ./hello\n</code></pre>"},{"location":"060_artifacts/exercise/#bonus-2-passing-environment-variables","title":"Bonus 2: Passing environment variables","text":"<p>XXX https://docs.gitlab.com/ee/ci/variables/index.html#pass-an-environment-variable-to-another-job</p> Hint (Click if you are stuck) <p>Example for creating an artifact for environment variables:</p> <pre><code>job_name:\n  script:\n  - echo \"foo=bar\" &gt;build.env\n  artifacts:\n    reports:\n      dotenv: build.env\n</code></pre> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nbuild:\n  stage: build\n  variables:\n    BINARY_NAME: hello\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o \"${BINARY_NAME}\" \\\n        .\n  - echo \"${BINARY_NAME}\" &gt;build.env\n  artifacts:\n    paths:\n    - hello\n    reports:\n      dotenv: build.env\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./${BINARY_NAME}\n</code></pre> <p>This was just a demonstration. The changes will not be preserved in the following chapters.</p>"},{"location":"065_job_dependencies/exercise/","title":"Job dependencies","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"065_job_dependencies/exercise/#task-start-the-build-job-early","title":"Task: Start the build job early","text":"<p>XXX start <code>build</code> after <code>audit</code> without waiting for <code>lint</code></p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nbuild:\n  stage: build\n  needs:\n  - audit\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n</code></pre> <p>This was just a demonstration. The changes will not be preserved in the following chapters.</p>"},{"location":"065_job_dependencies/exercise/#bonus-start-the-lint-job-late","title":"Bonus: Start the lint job late","text":"<p>XXX start <code>lint</code> after <code>audit</code></p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  needs:\n  - audit\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nbuild:\n  stage: build\n  needs:\n  - audit\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n</code></pre> <p>This was just a demonstration. The changes will not be preserved in the following chapters.</p>"},{"location":"090_unit_tests/exercise/","title":"Unit tests","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>execute unit tests</li> <li>publish results in GitLab</li> </ul>"},{"location":"090_unit_tests/exercise/#task-publish-unit-test-results","title":"Task: Publish unit test results","text":"<p>XXX https://docs.gitlab.com/ee/ci/testing/unit_test_reports.html</p> <p>The following commands execute unit tests and automatically convert the results to JUnit using gotestsum:</p> <pre><code>go install gotest.tools/gotestsum@latest\ngotestsum --junitfile report.xml\n</code></pre> <p>XXX https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html#artifactsreportsjunit</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run which shows the unit test results on the tab in the overview.</p> Hint (Click if you are stuck) <p>GitLab has published an example. The unit test report is published using a special type of artifact:</p> <pre><code>build:\n  stage: test\n  script: echo\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n</code></pre> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n</code></pre> <p>If you want to jump to the solution, execute the following command:</p> <p>git checkout origin/160_gitlab_ci/090_unit_tests -- '*'</p>"},{"location":"100_environments/exercise/","title":"Environments","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"100_environments/exercise/#preparation","title":"Preparation","text":"<p>XXX</p> <ol> <li>Retrieve passwords for dev and live environments from the info page</li> <li>Create unprotected but masked CI variable <code>PASS</code> twice with scope <code>dev</code> and <code>live</code></li> <li>Create unprotected CI variable <code>SEAT_INDEX</code> with your seat number</li> </ol>"},{"location":"100_environments/exercise/#task-1-add-target-environment","title":"Task 1: Add target environment","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> <p>XXX https://dev.seatN.inmylab.de/hello</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n- deploy\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n</code></pre>"},{"location":"100_environments/exercise/#task-2-add-deployment-to-development-environment","title":"Task 2: Add deployment to development environment","text":"<p>XXX branch <code>dev</code></p> <p>XXX then changes</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> <p>XXX https://dev.seatN.inmylab.de/hello</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n- deploy\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: ${CI_COMMIT_REF_NAME}\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://${CI_COMMIT_REF_NAME}.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n</code></pre> <p>This was just a demonstration. The changes will not be preseved in the following chapters.</p>"},{"location":"100_environments/exercise/#task-3-add-deployment-to-production-environment","title":"Task 3: Add deployment to production environment","text":"<p>XXX branch <code>live</code></p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> <p>XXX https://live.seatN.inmylab.de/hello</p> Hint (Click if you are stuck) <p>XXX</p> <p>XXX Warning to return to branch main</p>"},{"location":"110_triggers/exercise/","title":"Triggers","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"110_triggers/exercise/#preparation","title":"Preparation","text":"<p>XXX</p> <ol> <li>Create a new project (anywhere!)</li> <li>Add <code>.gitlab-ci.yml</code> with the following content to root of new project:     <pre><code>test:\n  script:\n  - printenv\n</code></pre></li> </ol>"},{"location":"110_triggers/exercise/#task-1-using-a-trigger-token","title":"Task 1: Using a trigger token","text":"<p>XXX</p> <ol> <li>In second project, go to Settings &gt; CI/CD and unfold Pipeline triggers</li> <li>Create a trigger and copy token as well as <code>curl</code> snippet</li> <li>Go back to first project</li> <li>Store <code>TOKEN</code> as unprotected but masked CI variable </li> <li>Add new stage and job called <code>trigger</code></li> <li>Add <code>curl</code> snippet in <code>script</code> block</li> <li>Fill in <code>REF_NAME</code> with branch name (<code>main</code>)</li> </ol> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\ntrigger:\n  stage: trigger\n  script:\n  - XXX\n</code></pre> <p>This was just a demonstration. The changes will not be preserved in the following chapters.</p>"},{"location":"110_triggers/exercise/#task-2-using-a-multi-project-pipeline","title":"Task 2: Using a multi-project pipeline","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\ntrigger:\n  stage: trigger\n  trigger:\n    XXX\n</code></pre> <p>This was just a demonstration. The changes will not be preserved in the following chapters.</p>"},{"location":"110_triggers/exercise/#task-3-using-a-parent-child-pipeline","title":"Task 3: Using a parent-child pipeline","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\ntrigger:\n  stage: trigger\n  trigger:\n    include: child.yaml\n</code></pre>"},{"location":"120_templates/exercise/","title":"Templates","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"120_templates/exercise/#task-1-create-a-template-inline","title":"Task 1: Create a template inline","text":"<p>XXX https://docs.gitlab.com/ee/ci/yaml/#include</p> <p>XXX https://docs.gitlab.com/ee/development/cicd/templates.html</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>stages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\n.build-go:\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n\nbuild:\n  stage: build\n  extends:\n  - .build-go\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\ntrigger:\n  stage: trigger\n  trigger:\n    include: child.yaml\n</code></pre>"},{"location":"120_templates/exercise/#task-2-loading-templates-from-a-local-file","title":"Task 2: Loading templates from a local file","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX <code>go.yaml</code></p> <pre><code>.build-go:\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello \\\n        .\n</code></pre> Solution (Click if you are stuck) <pre><code>include:\n- local: go.yaml\n\nstages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  extends:\n  - .build-go\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\ntrigger:\n  stage: trigger\n  trigger:\n    include: child.yaml\n</code></pre>"},{"location":"120_templates/exercise/#task-3-loading-templates-from-another-project","title":"Task 3: Loading templates from another project","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Solution (Click if you are stuck) <pre><code>include:\n- project: seat/template-go\n  ref: main\n  file: go.yaml\n\nstages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  extends:\n  - .build-go\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\ntrigger:\n  stage: trigger\n  trigger:\n    include: child.yaml\n</code></pre> <p>This was just a demonstration. The changes will not be preserved in the following chapters.</p>"},{"location":"130_rules/exercise/","title":"Rules","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"130_rules/exercise/#preparation","title":"Preparation","text":"<p>XXX</p> <ol> <li>XXX <code>public/</code></li> <li>XXX <code>public/index.html</code></li> </ol>"},{"location":"130_rules/exercise/#task-1-prevent-a-job-from-running","title":"Task 1: Prevent a job from running","text":"<p>XXX https://docs.gitlab.com/ee/ci/yaml/#rules</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> <p>XXX also see GitLab Pages </p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>include:\n- local: go.yaml\n\nstages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  extends:\n  - .build-go\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\npages:\n  stage: deploy\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  script:\n  - cp hello public/\n  artifacts:\n    paths:\n    - public\n\ntrigger:\n  stage: trigger\n  trigger:\n    include: child.yaml\n</code></pre>"},{"location":"130_rules/exercise/#task-2-prevent-a-pipeline-from-running","title":"Task 2: Prevent a pipeline from running","text":"<p>XXX https://docs.gitlab.com/ee/ci/yaml/#workflowrules</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>workflow:\n  rules:\n  - if: $CI_PIPELINE_SOURCE == 'push'\n  - if: $CI_PIPELINE_SOURCE == 'web'\n  - if: $CI_PIPELINE_SOURCE == 'schedule'\n  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'\n  - if: $CI_PIPELINE_SOURCE == 'pipeline'\n  - if: $CI_PIPELINE_SOURCE == 'api'\n    when: never\n  - if: $CI_PIPELINE_SOURCE == 'trigger'\n    when: never\n\ninclude:\n- local: go.yaml\n\nstages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  extends:\n  - .build-go\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\npages:\n  stage: deploy\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  script:\n  - cp hello public/\n  artifacts:\n    paths:\n    - public\n\ntrigger:\n  stage: trigger\n  trigger:\n    include: child.yaml\n</code></pre> <p>This was just a demonstration. The changes will not be preserved in the following chapters.</p>"},{"location":"130_rules/exercise/#task-3-use-deploy-freeze","title":"Task 3: Use deploy freeze","text":"<p>XXX https://docs.gitlab.com/ee/user/project/releases/index.html#prevent-unintentional-releases-by-setting-a-deploy-freeze</p> <p>XXX <code>$CI_DEPLOY_FREEZE</code></p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>workflow:\n  rules:\n  - if: $CI_DEPLOY_FREEZE\n    when: never\n  - if: $CI_PIPELINE_SOURCE == 'push'\n  - if: $CI_PIPELINE_SOURCE == 'web'\n  - if: $CI_PIPELINE_SOURCE == 'schedule'\n  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'\n  - if: $CI_PIPELINE_SOURCE == 'pipeline'\n  - if: $CI_PIPELINE_SOURCE == 'api'\n    when: never\n  - if: $CI_PIPELINE_SOURCE == 'trigger'\n    when: never\n\ninclude:\n- local: go.yaml\n\nstages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  extends:\n  - .build-go\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\npages:\n  stage: deploy\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  script:\n  - cp hello public/\n  artifacts:\n    paths:\n    - public\n\ntrigger:\n  stage: trigger\n  trigger:\n    include: child.yaml\n</code></pre> <p>This was just a demonstration. The changes will not be preserved in the following chapters.</p>"},{"location":"140_merge_requests/exercise/","title":"Merge requests","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"140_merge_requests/exercise/#task-1-use-rules-to-run-in-merge-request-context","title":"Task 1: Use rules to run in merge request context","text":"<p>XXX run on push to main and MR: <code>lint</code>, <code>audit</code>, <code>unit_tests</code>, <code>build</code>, <code>test</code></p> <p>XXX run only on push to main: <code>trigger</code></p> <p>XXX keep rules on <code>pages</code></p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>workflow:\n  rules:\n  - if: $CI_DEPLOY_FREEZE\n    when: never\n  - if: $CI_PIPELINE_SOURCE == 'push'\n  - if: $CI_PIPELINE_SOURCE == 'web'\n  - if: $CI_PIPELINE_SOURCE == 'schedule'\n  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'\n  - if: $CI_PIPELINE_SOURCE == 'pipeline'\n  - if: $CI_PIPELINE_SOURCE == 'api'\n    when: never\n  - if: $CI_PIPELINE_SOURCE == 'trigger'\n    when: never\n\ninclude:\n- local: go.yaml\n\nstages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n  extends:\n  - .build-go\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\npages:\n  stage: deploy\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  script:\n  - cp hello public/\n  artifacts:\n    paths:\n    - public\n\ntrigger:\n  stage: trigger\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  trigger:\n    include: child.yaml\n</code></pre>"},{"location":"140_merge_requests/exercise/#task-2-avoid-repetition-using-rule-templates","title":"Task 2: Avoid repetition using rule templates","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <pre><code>workflow:\n  rules:\n  - if: $CI_DEPLOY_FREEZE\n    when: never\n  - if: $CI_PIPELINE_SOURCE == 'push'\n  - if: $CI_PIPELINE_SOURCE == 'web'\n  - if: $CI_PIPELINE_SOURCE == 'schedule'\n  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'\n  - if: $CI_PIPELINE_SOURCE == 'pipeline'\n  - if: $CI_PIPELINE_SOURCE == 'api'\n    when: never\n  - if: $CI_PIPELINE_SOURCE == 'trigger'\n    when: never\n\ninclude:\n- local: go.yaml\n\n.run-on-push-to-default-branch:\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n\n.run-on-push-and-in-mr:\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n\nstages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  extends:\n  - .run-on-push-and-in-mr\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  extends:\n  - .run-on-push-and-in-mr\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  extends:\n  - .run-on-push-and-in-mr\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  extends:\n  - .run-on-push-and-in-mr\n  extends:\n  - .build-go\n  artifacts:\n    paths:\n    - hello\n\ntest:\n  stage: test\n  extends:\n  - .run-on-push-and-in-mr\n  image: alpine\n  script:\n  - ./hello\n\ndeploy:\n  stage: deploy\n  extends:\n  - .run-on-push-to-default-branch\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello \\\n        --user seat:${PASS}\n\npages:\n  stage: deploy\n  extends:\n  - .run-on-push-to-default-branch\n  script:\n  - cp hello public/\n  artifacts:\n    paths:\n    - public\n\ntrigger:\n  stage: trigger\n  extends:\n  - .run-on-push-to-default-branch\n  trigger:\n    include: child.yaml\n</code></pre>"},{"location":"150_matrix_jobs/exercise/","title":"Matrix Jobs","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"150_matrix_jobs/exercise/#task-build-binary-for-multiple-platforms","title":"Task: Build binary for multiple platforms","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <p><code>go.yaml</code>:</p> <pre><code>.build-go:\n  parallel:\n    matrix:\n    - GOOS: linux\n      GOARCH: amd64\n    - GOOS: linux\n      GOARCH: arm64\n  script:\n  - |\n    go build \\\n        -ldflags \"-X main.Version=${CI_COMMIT_REF_NAME} -X 'main.Author=${AUTHOR}'\" \\\n        -o hello-${GOOS}-${GOARCH} \\\n        .\n</code></pre> <p><code>.gitlab-ci.yml</code>:</p> <pre><code>workflow:\n  rules:\n  - if: $CI_DEPLOY_FREEZE\n    when: never\n  - if: $CI_PIPELINE_SOURCE == 'push'\n  - if: $CI_PIPELINE_SOURCE == 'web'\n  - if: $CI_PIPELINE_SOURCE == 'schedule'\n  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'\n  - if: $CI_PIPELINE_SOURCE == 'pipeline'\n  - if: $CI_PIPELINE_SOURCE == 'api'\n    when: never\n  - if: $CI_PIPELINE_SOURCE == 'trigger'\n    when: never\n\ninclude:\n- local: go.yaml\n\n.run-on-push-to-default-branch:\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n\n.run-on-push-and-in-mr:\n  rules:\n  - if: '$CI_PIPELINE_SOURCE == \"push\" &amp;&amp; $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'\n  - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n\nstages:\n- check\n- build\n- test\n- deploy\n- trigger\n\ndefault:\n  image: golang:1.19.2\n\nlint:\n  stage: check\n  extends:\n  - .run-on-push-and-in-mr\n  script:\n  - go fmt .\n\naudit:\n  stage: check\n  extends:\n  - .run-on-push-and-in-mr\n  script:\n  - go vet .\n\nunit_tests:\n  stage: check\n  extends:\n  - .run-on-push-and-in-mr\n  script:\n  - go install gotest.tools/gotestsum@latest\n  - gotestsum --junitfile report.xml --format testname\n  artifacts:\n    when: always\n    reports:\n      junit: report.xml\n\nbuild:\n  stage: build\n  extends:\n  - .run-on-push-and-in-mr\n  extends:\n  - .build-go\n  artifacts:\n    paths:\n    - hello-*\n\ntest:\n  stage: test\n  extends:\n  - .run-on-push-and-in-mr\n  image: alpine\n  script:\n  - ./hello-linux-amd64\n\ndeploy:\n  stage: deploy\n  extends:\n  - .run-on-push-to-default-branch\n  environment:\n    name: dev\n  before_script:\n  - apt-get update\n  - apt-get -y install curl ca-certificates\n  script:\n  - |\n    curl https://dev.seat${SEAT_INDEX}.inmylab.de/ \\\n        --fail \\\n        --verbose \\\n        --upload-file hello-linux-amd64 \\\n        --user seat:${PASS}\n\npages:\n  stage: deploy\n  extends:\n  - .run-on-push-to-default-branch\n  script:\n  - cp hello-linux-amd64 public/hello\n  artifacts:\n    paths:\n    - public\n\ntrigger:\n  stage: trigger\n  extends:\n  - .run-on-push-to-default-branch\n  trigger:\n    include: child.yaml\n</code></pre>"},{"location":"210_caches/exercise/","title":"Caches","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"210_caches/exercise/#task-1-xxx","title":"Task 1: XXX","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <p>XXX</p>"},{"location":"220_services/exercise/","title":"Services","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"220_services/exercise/#task-1-xxx","title":"Task 1: XXX","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <p>XXX</p>"},{"location":"230_docker/exercise/","title":"Docker","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"230_docker/exercise/#task-1-xxx","title":"Task 1: XXX","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <p>XXX</p>"},{"location":"240_registries/exercise/","title":"Registries","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"240_registries/exercise/#task-1-xxx","title":"Task 1: XXX","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <p>XXX</p>"},{"location":"250_releases/exercise/","title":"Releases","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"250_releases/exercise/#task-1-xxx","title":"Task 1: XXX","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <p>XXX</p>"},{"location":"270_renovate/exercise/","title":"Renovate","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"270_renovate/exercise/#task-1-xxx","title":"Task 1: XXX","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <p>XXX</p>"},{"location":"280_security/exercise/","title":"Security","text":"<p>Goal</p> <p>Learn how to...</p> <ul> <li>XXX</li> </ul>"},{"location":"280_security/exercise/#task-1-xxx","title":"Task 1: XXX","text":"<p>XXX</p> <p>Afterwards check the pipeline in the GitLab UI. You should see a successful pipeline run.</p> Hint (Click if you are stuck) <p>XXX</p> Solution (Click if you are stuck) <p>XXX</p>"}]}